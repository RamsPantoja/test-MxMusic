{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport invariant from '../jsutils/invariant';\nimport defineToStringTag from '../jsutils/defineToStringTag';\n/**\r\n * A representation of source input to GraphQL.\r\n * `name` and `locationOffset` are optional. They are useful for clients who\r\n * store GraphQL documents in source files; for example, if the GraphQL input\r\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\r\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\r\n * line and column in locationOffset are 1-indexed\r\n */\n\nexport var Source = function Source(body, name, locationOffset) {\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || {\n    line: 1,\n    column: 1\n  };\n  !(this.locationOffset.line > 0) ? invariant(0, 'line in locationOffset is 1-indexed and must be positive') : void 0;\n  !(this.locationOffset.column > 0) ? invariant(0, 'column in locationOffset is 1-indexed and must be positive') : void 0;\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(Source);","map":{"version":3,"sources":["C:/Users/fer cordoba s/Documents/Web/test-MxMusic/cliente/node_modules/graphql/language/source.mjs"],"names":["invariant","defineToStringTag","Source","body","name","locationOffset","line","column"],"mappings":"AAAA;;;;;;;;AAQA,OAAOA,SAAP,MAAsB,sBAAtB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AAEA;;;;;;;;;AAQA,OAAO,IAAIC,MAAM,GAAG,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,IAAtB,EAA4BC,cAA5B,EAA4C;AAC9D,OAAKF,IAAL,GAAYA,IAAZ;AACA,OAAKC,IAAL,GAAYA,IAAI,IAAI,iBAApB;AACA,OAAKC,cAAL,GAAsBA,cAAc,IAAI;AACtCC,IAAAA,IAAI,EAAE,CADgC;AAEtCC,IAAAA,MAAM,EAAE;AAF8B,GAAxC;AAIA,IAAE,KAAKF,cAAL,CAAoBC,IAApB,GAA2B,CAA7B,IAAkCN,SAAS,CAAC,CAAD,EAAI,0DAAJ,CAA3C,GAA6G,KAAK,CAAlH;AACA,IAAE,KAAKK,cAAL,CAAoBE,MAApB,GAA6B,CAA/B,IAAoCP,SAAS,CAAC,CAAD,EAAI,4DAAJ,CAA7C,GAAiH,KAAK,CAAtH;AACD,CATM,C,CASJ;;AAEHC,iBAAiB,CAACC,MAAD,CAAjB","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\nimport invariant from '../jsutils/invariant';\r\nimport defineToStringTag from '../jsutils/defineToStringTag';\r\n\r\n/**\r\n * A representation of source input to GraphQL.\r\n * `name` and `locationOffset` are optional. They are useful for clients who\r\n * store GraphQL documents in source files; for example, if the GraphQL input\r\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\r\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\r\n * line and column in locationOffset are 1-indexed\r\n */\r\nexport var Source = function Source(body, name, locationOffset) {\r\n  this.body = body;\r\n  this.name = name || 'GraphQL request';\r\n  this.locationOffset = locationOffset || {\r\n    line: 1,\r\n    column: 1\r\n  };\r\n  !(this.locationOffset.line > 0) ? invariant(0, 'line in locationOffset is 1-indexed and must be positive') : void 0;\r\n  !(this.locationOffset.column > 0) ? invariant(0, 'column in locationOffset is 1-indexed and must be positive') : void 0;\r\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\r\n\r\ndefineToStringTag(Source);\r\n"]},"metadata":{},"sourceType":"module"}