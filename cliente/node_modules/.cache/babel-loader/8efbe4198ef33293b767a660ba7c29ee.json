{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rams\\\\Documents\\\\Web\\\\Spotify\\\\cliente\\\\src\\\\components\\\\Player\\\\audiocomponent.js\";\nimport React, { Fragment } from 'react';\nimport PlayerControls from './buttons_player/playercontrols';\n\nclass ComponentAudio extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playStatus: 'false',\n      currentTime: 0,\n      percent: 0\n    };\n    this.reactAudioPlayer = React.createRef().bind(this);\n    this.play = this.play.bind(this);\n    this.updateTime = this.updateTime.bind(this);\n    this.modifyProgressBar = this.modifyProgressBar.bind(this);\n    this.updateBar = this.updateBar.bind(this);\n  }\n\n  updateTime(timeStamp) {\n    let currentTime = Math.floor(timeStamp);\n    this.setState({\n      currentTime: currentTime\n    });\n  }\n\n  modifyProgressBar(e) {\n    let audioP = Math.floor(e); //console.log(audioP);\n\n    let audio = document.getElementById('audio');\n\n    if (!audio.paused && !audio.ended) {\n      let newTime = audioP * audio.duration / 100;\n      audio.currentTime = newTime;\n    }\n  }\n\n  updateBar(percent) {\n    this.setState({\n      percent: percent\n    });\n  }\n\n  play() {\n    let status = this.state.playStatus;\n\n    if (status === 'false') {\n      setTimeout(() => {\n        this.reactAudioPlayer.current.play();\n      }, 0);\n      status = 'true';\n    } else {\n      this.reactAudioPlayer.current.pause();\n      status = 'play';\n    }\n\n    this.setState({\n      playStatus: status\n    });\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"audio\", {\n      id: \"audio\",\n      ref: this.reactAudioPlayer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"source\", {\n      src: this.props.source,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })), React.createElement(PlayerControls, {\n      percent: this.state.percent,\n      onClick: this.toggleplay,\n      currentTime: this.state.currentTime,\n      onChangeMusic: this.modifyProgressBar,\n      duration: this.props.duracion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ComponentAudio;","map":{"version":3,"sources":["C:\\Users\\Rams\\Documents\\Web\\Spotify\\cliente\\src\\components\\Player\\audiocomponent.js"],"names":["React","Fragment","PlayerControls","ComponentAudio","Component","constructor","props","state","playStatus","currentTime","percent","reactAudioPlayer","createRef","bind","play","updateTime","modifyProgressBar","updateBar","timeStamp","Math","floor","setState","e","audioP","audio","document","getElementById","paused","ended","newTime","duration","status","setTimeout","current","pause","render","source","toggleplay","duracion"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport PlayerControls from './buttons_player/playercontrols';\r\n\r\nclass ComponentAudio extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            playStatus: 'false',\r\n            currentTime: 0,\r\n            percent: 0\r\n        }\r\n        this.reactAudioPlayer = React.createRef().bind(this);\r\n        this.play = this.play.bind(this);\r\n        this.updateTime = this.updateTime.bind(this);\r\n        this.modifyProgressBar = this.modifyProgressBar.bind(this);\r\n        this.updateBar = this.updateBar.bind(this);\r\n    }\r\n\r\n    updateTime (timeStamp) {\r\n        let currentTime = Math.floor(timeStamp)\r\n        this.setState({\r\n            currentTime: currentTime\r\n        })\r\n    }\r\n\r\n    modifyProgressBar(e){\r\n        let audioP = Math.floor(e);\r\n        //console.log(audioP);\r\n        let audio = document.getElementById('audio');\r\n        if(!audio.paused && !audio.ended){\r\n            let newTime = (audioP*audio.duration) / 100;\r\n            audio.currentTime = newTime;\r\n        }\r\n     \r\n    }\r\n\r\n    updateBar(percent){\r\n        this.setState({\r\n            percent: percent\r\n        })\r\n    }\r\n    \r\n    play () {\r\n        let status = this.state.playStatus;\r\n        if ( status === 'false') {\r\n            setTimeout(() => {\r\n                this.reactAudioPlayer.current.play();\r\n            }, 0)\r\n            status = 'true'\r\n        } else {\r\n            this.reactAudioPlayer.current.pause();\r\n\r\n            status = 'play';\r\n        }\r\n\r\n        this.setState({\r\n            playStatus: status\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Fragment>\r\n                <audio id='audio' ref={this.reactAudioPlayer}><source src={this.props.source}/></audio>\r\n                <PlayerControls percent={this.state.percent} onClick={this.toggleplay} currentTime={this.state.currentTime} onChangeMusic={this.modifyProgressBar} duration={this.props.duracion}/>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ComponentAudio;"]},"metadata":{},"sourceType":"module"}