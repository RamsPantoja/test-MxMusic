{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rams\\\\Documents\\\\Web\\\\Spotify\\\\cliente\\\\src\\\\components\\\\Player\\\\audiocomponent.js\";\nimport React, { Fragment } from 'react';\nimport PlayerControls from './buttons_player/playercontrols';\n\nclass ComponentAudio extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playStatus: 'false',\n      audioControls: {\n        songPercent: 0,\n        songTime: '',\n        songDuration: ''\n      }\n    };\n    this.reactAudioPlayer = React.createRef();\n    this.togglePlay = this.togglePlay.bind(this);\n    this.onTimeUpdateListener = this.onTimeUpdateListener.bind(this);\n  }\n\n  onTimeUpdateListener() {\n    let currentDuration = this.reactAudioPlayer.current.duration;\n    let currentTime = this.reactAudioPlayer.current.currentTime;\n    console.log(currentDuration);\n    let percent = currentTime / currentDuration * 100;\n    console.log(percent);\n    let audioControls = Object.assign({}, this.state.audioControls);\n\n    if (isNaN(percent)) {\n      audioControls.songPercent = 0;\n    } else {\n      audioControls.songPercent = percent;\n      audioControls.songTime = Math.floor(currentTime.toFixed(0) / 60) + ':' + (currentTime.toFixed(0) % 60 ? Utils.minTwoDigits(currentTime.toFixed(0) % 60) : '00');\n      audioControls.songDuration = Math.floor(currentDuration.toFixed(0) / 60) + ':' + (currentDuration.toFixed(0) % 60 ? Utils.minTwoDigits(currentDuration.toFixed(0) % 60) : '00');\n      this.setState({\n        audioControls\n      });\n    }\n  }\n\n  togglePlay() {\n    let status = this.state.playStatus;\n\n    if (status === 'false') {\n      setTimeout(() => {\n        this.reactAudioPlayer.current.play();\n      }, 0);\n      status = 'true';\n    } else {\n      this.reactAudioPlayer.current.pause();\n      status = 'false';\n    }\n\n    this.setState({\n      playStatus: status\n    });\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"audio\", {\n      id: \"audio\",\n      ref: this.reactAudioPlayer,\n      src: this.props.source,\n      onTimeUpdate: this.onTimeUpdateListener,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(PlayerControls, {\n      percent: this.state.audioControls.songPercent,\n      onClick: this.togglePlay,\n      currentTime: this.state.currentTime,\n      onChangeMusic: this.modifyProgressBar,\n      duration: this.props.duracion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ComponentAudio;","map":{"version":3,"sources":["C:\\Users\\Rams\\Documents\\Web\\Spotify\\cliente\\src\\components\\Player\\audiocomponent.js"],"names":["React","Fragment","PlayerControls","ComponentAudio","Component","constructor","props","state","playStatus","audioControls","songPercent","songTime","songDuration","reactAudioPlayer","createRef","togglePlay","bind","onTimeUpdateListener","currentDuration","current","duration","currentTime","console","log","percent","Object","assign","isNaN","Math","floor","toFixed","Utils","minTwoDigits","setState","status","setTimeout","play","pause","render","source","modifyProgressBar","duracion"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport PlayerControls from './buttons_player/playercontrols';\r\n\r\nclass ComponentAudio extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            playStatus: 'false',\r\n            audioControls: {\r\n                songPercent: 0,\r\n                songTime: '',\r\n                songDuration: ''\r\n            }\r\n        }\r\n        this.reactAudioPlayer = React.createRef();\r\n        this.togglePlay = this.togglePlay.bind(this);\r\n        this.onTimeUpdateListener = this.onTimeUpdateListener.bind(this);\r\n    }\r\n\r\n    onTimeUpdateListener () {\r\n        let currentDuration = this.reactAudioPlayer.current.duration;\r\n        let currentTime = this.reactAudioPlayer.current.currentTime;\r\n        console.log(currentDuration)\r\n        let percent = (currentTime / currentDuration) * 100;\r\n        console.log(percent)\r\n        let audioControls = Object.assign({}, this.state.audioControls);\r\n        if (isNaN(percent)){\r\n            audioControls.songPercent = 0;\r\n        } else {\r\n            audioControls.songPercent = percent;\r\n            audioControls.songTime = Math.floor(currentTime.toFixed(0) / 60) + ':' + (currentTime.toFixed(0) % 60 ? Utils.minTwoDigits((currentTime.toFixed(0) % 60)) : '00')\r\n            audioControls.songDuration = Math.floor(currentDuration.toFixed(0) / 60) + ':' + (currentDuration.toFixed(0) % 60 ? Utils.minTwoDigits(currentDuration.toFixed(0) % 60) : '00')\r\n            this.setState({ audioControls });\r\n        }\r\n    }\r\n    \r\n    togglePlay () {\r\n        let status = this.state.playStatus;\r\n        if ( status === 'false') {\r\n            setTimeout(() => {\r\n                this.reactAudioPlayer.current.play();\r\n            }, 0)\r\n            status = 'true'\r\n        } else {\r\n            this.reactAudioPlayer.current.pause();\r\n            status = 'false';\r\n        }\r\n\r\n        this.setState({\r\n            playStatus: status\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Fragment>\r\n                <audio id='audio' ref={this.reactAudioPlayer} src={this.props.source} onTimeUpdate={this.onTimeUpdateListener}></audio>\r\n                <PlayerControls percent={this.state.audioControls.songPercent} onClick={this.togglePlay} currentTime={this.state.currentTime} onChangeMusic={this.modifyProgressBar} duration={this.props.duracion}/>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ComponentAudio;"]},"metadata":{},"sourceType":"module"}