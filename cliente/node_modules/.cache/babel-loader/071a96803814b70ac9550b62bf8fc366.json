{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nimport defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error';\nimport { dedentBlockStringValue } from './blockString';\n/**\r\n * Given a Source object, this returns a Lexer for that source.\r\n * A Lexer is a stateful stream generator in that every time\r\n * it is advanced, it returns the next token in the Source. Assuming the\r\n * source lexes, the final Token emitted by the lexer will be of kind\r\n * EOF, after which the lexer will repeatedly return the same EOF token\r\n * whenever called.\r\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\r\n * The return type of createLexer.\r\n */\n\n/**\r\n * An exported enum describing the different kinds of tokens that the\r\n * lexer emits.\r\n */\n\n\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\r\n * The enum type representing the token kinds values.\r\n */\n// @internal\n\nexport function isPunctuatorToken(token) {\n  var kind = token.kind;\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n/**\r\n * A helper function to describe a token as a string for debugging\r\n */\n\nexport function getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\n/**\r\n * Helper function for constructing the Token object.\r\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Tok, function () {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n});\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\r\n * Gets the next token from the source starting at the given position.\r\n *\r\n * This skips over whitespace until it finds the next lexable token, then lexes\r\n * punctuators immediately or calls the appropriate helper function for more\r\n * complicated tokens.\r\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = body.charCodeAt(pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\r\n * Report a message that an unexpected character was encountered.\r\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\r\n * Reads from body starting at startPosition until it finds a non-whitespace\r\n * character, then returns the position of that character for lexing.\r\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\r\n * Reads a comment token from the source file.\r\n *\r\n * #[\\u0009\\u0020-\\uFFFF]*\r\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\r\n * Reads a number token from the source file, either a float\r\n * or an int depending on whether a decimal point appears.\r\n *\r\n * Int:   -?(0|[1-9][0-9]*)\r\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\r\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\r\n * Returns the new position in the source after reading digits.\r\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\r\n * Reads a string token from the source file.\r\n *\r\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\r\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              throw syntaxError(source, position, 'Invalid character escape sequence: ' + \"\\\\u\".concat(body.slice(position + 1, position + 5), \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\r\n * Reads a block string token from the source file.\r\n *\r\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\r\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\r\n * Converts four hexadecimal chars to the integer that the\r\n * string represents. For example, uniCharCode('0','0','0','f')\r\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\r\n *\r\n * Returns a negative number on error, if a char was invalid.\r\n *\r\n * This is implemented by noting that char2hex() returns -1 on error,\r\n * which means the result of ORing the char2hex() will also be negative.\r\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\r\n * Converts a hex character to its integer value.\r\n * '0' becomes 0, '9' becomes 9\r\n * 'A' becomes 10, 'F' becomes 15\r\n * 'a' becomes 10, 'f' becomes 15\r\n *\r\n * Returns -1 on error.\r\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\r\n * Reads an alphanumeric + underscore name from the source.\r\n *\r\n * [_A-Za-z][_0-9A-Za-z]*\r\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n}","map":{"version":3,"sources":["C:/Users/fer cordoba s/Documents/Web/test-MxMusic/cliente/node_modules/graphql/language/lexer.mjs"],"names":["defineToJSON","syntaxError","dedentBlockStringValue","createLexer","source","options","startOfFileToken","Tok","TokenKind","SOF","lexer","lastToken","token","line","lineStart","advance","advanceLexer","lookahead","kind","EOF","next","readToken","COMMENT","Object","freeze","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","NAME","INT","FLOAT","STRING","BLOCK_STRING","isPunctuatorToken","getTokenDesc","value","concat","start","end","column","prev","printCharCode","code","isNaN","JSON","stringify","String","fromCharCode","toString","toUpperCase","slice","body","bodyLength","length","pos","positionAfterWhitespace","col","charCodeAt","readComment","readName","readNumber","readBlockString","readString","unexpectedCharacterMessage","startPosition","position","firstCode","isFloat","readDigits","chunkStart","charCode","uniCharCode","rawValue","a","b","c","d","char2hex"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\nimport defineToJSON from '../jsutils/defineToJSON';\r\nimport { syntaxError } from '../error';\r\nimport { dedentBlockStringValue } from './blockString';\r\n/**\r\n * Given a Source object, this returns a Lexer for that source.\r\n * A Lexer is a stateful stream generator in that every time\r\n * it is advanced, it returns the next token in the Source. Assuming the\r\n * source lexes, the final Token emitted by the lexer will be of kind\r\n * EOF, after which the lexer will repeatedly return the same EOF token\r\n * whenever called.\r\n */\r\n\r\nexport function createLexer(source, options) {\r\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\r\n  var lexer = {\r\n    source: source,\r\n    options: options,\r\n    lastToken: startOfFileToken,\r\n    token: startOfFileToken,\r\n    line: 1,\r\n    lineStart: 0,\r\n    advance: advanceLexer,\r\n    lookahead: lookahead\r\n  };\r\n  return lexer;\r\n}\r\n\r\nfunction advanceLexer() {\r\n  this.lastToken = this.token;\r\n  var token = this.token = this.lookahead();\r\n  return token;\r\n}\r\n\r\nfunction lookahead() {\r\n  var token = this.token;\r\n\r\n  if (token.kind !== TokenKind.EOF) {\r\n    do {\r\n      // Note: next is only mutable during parsing, so we cast to allow this.\r\n      token = token.next || (token.next = readToken(this, token));\r\n    } while (token.kind === TokenKind.COMMENT);\r\n  }\r\n\r\n  return token;\r\n}\r\n/**\r\n * The return type of createLexer.\r\n */\r\n\r\n\r\n/**\r\n * An exported enum describing the different kinds of tokens that the\r\n * lexer emits.\r\n */\r\nexport var TokenKind = Object.freeze({\r\n  SOF: '<SOF>',\r\n  EOF: '<EOF>',\r\n  BANG: '!',\r\n  DOLLAR: '$',\r\n  AMP: '&',\r\n  PAREN_L: '(',\r\n  PAREN_R: ')',\r\n  SPREAD: '...',\r\n  COLON: ':',\r\n  EQUALS: '=',\r\n  AT: '@',\r\n  BRACKET_L: '[',\r\n  BRACKET_R: ']',\r\n  BRACE_L: '{',\r\n  PIPE: '|',\r\n  BRACE_R: '}',\r\n  NAME: 'Name',\r\n  INT: 'Int',\r\n  FLOAT: 'Float',\r\n  STRING: 'String',\r\n  BLOCK_STRING: 'BlockString',\r\n  COMMENT: 'Comment'\r\n});\r\n/**\r\n * The enum type representing the token kinds values.\r\n */\r\n\r\n// @internal\r\nexport function isPunctuatorToken(token) {\r\n  var kind = token.kind;\r\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\r\n}\r\n/**\r\n * A helper function to describe a token as a string for debugging\r\n */\r\n\r\nexport function getTokenDesc(token) {\r\n  var value = token.value;\r\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\r\n}\r\n/**\r\n * Helper function for constructing the Token object.\r\n */\r\n\r\nfunction Tok(kind, start, end, line, column, prev, value) {\r\n  this.kind = kind;\r\n  this.start = start;\r\n  this.end = end;\r\n  this.line = line;\r\n  this.column = column;\r\n  this.value = value;\r\n  this.prev = prev;\r\n  this.next = null;\r\n} // Print a simplified form when appearing in JSON/util.inspect.\r\n\r\n\r\ndefineToJSON(Tok, function () {\r\n  return {\r\n    kind: this.kind,\r\n    value: this.value,\r\n    line: this.line,\r\n    column: this.column\r\n  };\r\n});\r\n\r\nfunction printCharCode(code) {\r\n  return (// NaN/undefined represents access beyond the end of the file.\r\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\r\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\r\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\r\n  );\r\n}\r\n/**\r\n * Gets the next token from the source starting at the given position.\r\n *\r\n * This skips over whitespace until it finds the next lexable token, then lexes\r\n * punctuators immediately or calls the appropriate helper function for more\r\n * complicated tokens.\r\n */\r\n\r\n\r\nfunction readToken(lexer, prev) {\r\n  var source = lexer.source;\r\n  var body = source.body;\r\n  var bodyLength = body.length;\r\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\r\n  var line = lexer.line;\r\n  var col = 1 + pos - lexer.lineStart;\r\n\r\n  if (pos >= bodyLength) {\r\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\r\n  }\r\n\r\n  var code = body.charCodeAt(pos); // SourceCharacter\r\n\r\n  switch (code) {\r\n    // !\r\n    case 33:\r\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\r\n    // #\r\n\r\n    case 35:\r\n      return readComment(source, pos, line, col, prev);\r\n    // $\r\n\r\n    case 36:\r\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\r\n    // &\r\n\r\n    case 38:\r\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\r\n    // (\r\n\r\n    case 40:\r\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\r\n    // )\r\n\r\n    case 41:\r\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\r\n    // .\r\n\r\n    case 46:\r\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\r\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\r\n      }\r\n\r\n      break;\r\n    // :\r\n\r\n    case 58:\r\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\r\n    // =\r\n\r\n    case 61:\r\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\r\n    // @\r\n\r\n    case 64:\r\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\r\n    // [\r\n\r\n    case 91:\r\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\r\n    // ]\r\n\r\n    case 93:\r\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\r\n    // {\r\n\r\n    case 123:\r\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\r\n    // |\r\n\r\n    case 124:\r\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\r\n    // }\r\n\r\n    case 125:\r\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\r\n    // A-Z _ a-z\r\n\r\n    case 65:\r\n    case 66:\r\n    case 67:\r\n    case 68:\r\n    case 69:\r\n    case 70:\r\n    case 71:\r\n    case 72:\r\n    case 73:\r\n    case 74:\r\n    case 75:\r\n    case 76:\r\n    case 77:\r\n    case 78:\r\n    case 79:\r\n    case 80:\r\n    case 81:\r\n    case 82:\r\n    case 83:\r\n    case 84:\r\n    case 85:\r\n    case 86:\r\n    case 87:\r\n    case 88:\r\n    case 89:\r\n    case 90:\r\n    case 95:\r\n    case 97:\r\n    case 98:\r\n    case 99:\r\n    case 100:\r\n    case 101:\r\n    case 102:\r\n    case 103:\r\n    case 104:\r\n    case 105:\r\n    case 106:\r\n    case 107:\r\n    case 108:\r\n    case 109:\r\n    case 110:\r\n    case 111:\r\n    case 112:\r\n    case 113:\r\n    case 114:\r\n    case 115:\r\n    case 116:\r\n    case 117:\r\n    case 118:\r\n    case 119:\r\n    case 120:\r\n    case 121:\r\n    case 122:\r\n      return readName(source, pos, line, col, prev);\r\n    // - 0-9\r\n\r\n    case 45:\r\n    case 48:\r\n    case 49:\r\n    case 50:\r\n    case 51:\r\n    case 52:\r\n    case 53:\r\n    case 54:\r\n    case 55:\r\n    case 56:\r\n    case 57:\r\n      return readNumber(source, pos, code, line, col, prev);\r\n    // \"\r\n\r\n    case 34:\r\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\r\n        return readBlockString(source, pos, line, col, prev, lexer);\r\n      }\r\n\r\n      return readString(source, pos, line, col, prev);\r\n  }\r\n\r\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\r\n}\r\n/**\r\n * Report a message that an unexpected character was encountered.\r\n */\r\n\r\n\r\nfunction unexpectedCharacterMessage(code) {\r\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\r\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\r\n  }\r\n\r\n  if (code === 39) {\r\n    // '\r\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\r\n  }\r\n\r\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\r\n}\r\n/**\r\n * Reads from body starting at startPosition until it finds a non-whitespace\r\n * character, then returns the position of that character for lexing.\r\n */\r\n\r\n\r\nfunction positionAfterWhitespace(body, startPosition, lexer) {\r\n  var bodyLength = body.length;\r\n  var position = startPosition;\r\n\r\n  while (position < bodyLength) {\r\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\r\n\r\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\r\n      ++position;\r\n    } else if (code === 10) {\r\n      // new line\r\n      ++position;\r\n      ++lexer.line;\r\n      lexer.lineStart = position;\r\n    } else if (code === 13) {\r\n      // carriage return\r\n      if (body.charCodeAt(position + 1) === 10) {\r\n        position += 2;\r\n      } else {\r\n        ++position;\r\n      }\r\n\r\n      ++lexer.line;\r\n      lexer.lineStart = position;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return position;\r\n}\r\n/**\r\n * Reads a comment token from the source file.\r\n *\r\n * #[\\u0009\\u0020-\\uFFFF]*\r\n */\r\n\r\n\r\nfunction readComment(source, start, line, col, prev) {\r\n  var body = source.body;\r\n  var code;\r\n  var position = start;\r\n\r\n  do {\r\n    code = body.charCodeAt(++position);\r\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\r\n  code > 0x001f || code === 0x0009));\r\n\r\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\r\n}\r\n/**\r\n * Reads a number token from the source file, either a float\r\n * or an int depending on whether a decimal point appears.\r\n *\r\n * Int:   -?(0|[1-9][0-9]*)\r\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\r\n */\r\n\r\n\r\nfunction readNumber(source, start, firstCode, line, col, prev) {\r\n  var body = source.body;\r\n  var code = firstCode;\r\n  var position = start;\r\n  var isFloat = false;\r\n\r\n  if (code === 45) {\r\n    // -\r\n    code = body.charCodeAt(++position);\r\n  }\r\n\r\n  if (code === 48) {\r\n    // 0\r\n    code = body.charCodeAt(++position);\r\n\r\n    if (code >= 48 && code <= 57) {\r\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\r\n    }\r\n  } else {\r\n    position = readDigits(source, position, code);\r\n    code = body.charCodeAt(position);\r\n  }\r\n\r\n  if (code === 46) {\r\n    // .\r\n    isFloat = true;\r\n    code = body.charCodeAt(++position);\r\n    position = readDigits(source, position, code);\r\n    code = body.charCodeAt(position);\r\n  }\r\n\r\n  if (code === 69 || code === 101) {\r\n    // E e\r\n    isFloat = true;\r\n    code = body.charCodeAt(++position);\r\n\r\n    if (code === 43 || code === 45) {\r\n      // + -\r\n      code = body.charCodeAt(++position);\r\n    }\r\n\r\n    position = readDigits(source, position, code);\r\n  }\r\n\r\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\r\n}\r\n/**\r\n * Returns the new position in the source after reading digits.\r\n */\r\n\r\n\r\nfunction readDigits(source, start, firstCode) {\r\n  var body = source.body;\r\n  var position = start;\r\n  var code = firstCode;\r\n\r\n  if (code >= 48 && code <= 57) {\r\n    // 0 - 9\r\n    do {\r\n      code = body.charCodeAt(++position);\r\n    } while (code >= 48 && code <= 57); // 0 - 9\r\n\r\n\r\n    return position;\r\n  }\r\n\r\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\r\n}\r\n/**\r\n * Reads a string token from the source file.\r\n *\r\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\r\n */\r\n\r\n\r\nfunction readString(source, start, line, col, prev) {\r\n  var body = source.body;\r\n  var position = start + 1;\r\n  var chunkStart = position;\r\n  var code = 0;\r\n  var value = '';\r\n\r\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\r\n  code !== 0x000a && code !== 0x000d) {\r\n    // Closing Quote (\")\r\n    if (code === 34) {\r\n      value += body.slice(chunkStart, position);\r\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\r\n    } // SourceCharacter\r\n\r\n\r\n    if (code < 0x0020 && code !== 0x0009) {\r\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\r\n    }\r\n\r\n    ++position;\r\n\r\n    if (code === 92) {\r\n      // \\\r\n      value += body.slice(chunkStart, position - 1);\r\n      code = body.charCodeAt(position);\r\n\r\n      switch (code) {\r\n        case 34:\r\n          value += '\"';\r\n          break;\r\n\r\n        case 47:\r\n          value += '/';\r\n          break;\r\n\r\n        case 92:\r\n          value += '\\\\';\r\n          break;\r\n\r\n        case 98:\r\n          value += '\\b';\r\n          break;\r\n\r\n        case 102:\r\n          value += '\\f';\r\n          break;\r\n\r\n        case 110:\r\n          value += '\\n';\r\n          break;\r\n\r\n        case 114:\r\n          value += '\\r';\r\n          break;\r\n\r\n        case 116:\r\n          value += '\\t';\r\n          break;\r\n\r\n        case 117:\r\n          {\r\n            // uXXXX\r\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\r\n\r\n            if (charCode < 0) {\r\n              throw syntaxError(source, position, 'Invalid character escape sequence: ' + \"\\\\u\".concat(body.slice(position + 1, position + 5), \".\"));\r\n            }\r\n\r\n            value += String.fromCharCode(charCode);\r\n            position += 4;\r\n            break;\r\n          }\r\n\r\n        default:\r\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\r\n      }\r\n\r\n      ++position;\r\n      chunkStart = position;\r\n    }\r\n  }\r\n\r\n  throw syntaxError(source, position, 'Unterminated string.');\r\n}\r\n/**\r\n * Reads a block string token from the source file.\r\n *\r\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\r\n */\r\n\r\n\r\nfunction readBlockString(source, start, line, col, prev, lexer) {\r\n  var body = source.body;\r\n  var position = start + 3;\r\n  var chunkStart = position;\r\n  var code = 0;\r\n  var rawValue = '';\r\n\r\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\r\n    // Closing Triple-Quote (\"\"\")\r\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\r\n      rawValue += body.slice(chunkStart, position);\r\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\r\n    } // SourceCharacter\r\n\r\n\r\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\r\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\r\n    }\r\n\r\n    if (code === 10) {\r\n      // new line\r\n      ++position;\r\n      ++lexer.line;\r\n      lexer.lineStart = position;\r\n    } else if (code === 13) {\r\n      // carriage return\r\n      if (body.charCodeAt(position + 1) === 10) {\r\n        position += 2;\r\n      } else {\r\n        ++position;\r\n      }\r\n\r\n      ++lexer.line;\r\n      lexer.lineStart = position;\r\n    } else if ( // Escape Triple-Quote (\\\"\"\")\r\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\r\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\r\n      position += 4;\r\n      chunkStart = position;\r\n    } else {\r\n      ++position;\r\n    }\r\n  }\r\n\r\n  throw syntaxError(source, position, 'Unterminated string.');\r\n}\r\n/**\r\n * Converts four hexadecimal chars to the integer that the\r\n * string represents. For example, uniCharCode('0','0','0','f')\r\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\r\n *\r\n * Returns a negative number on error, if a char was invalid.\r\n *\r\n * This is implemented by noting that char2hex() returns -1 on error,\r\n * which means the result of ORing the char2hex() will also be negative.\r\n */\r\n\r\n\r\nfunction uniCharCode(a, b, c, d) {\r\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\r\n}\r\n/**\r\n * Converts a hex character to its integer value.\r\n * '0' becomes 0, '9' becomes 9\r\n * 'A' becomes 10, 'F' becomes 15\r\n * 'a' becomes 10, 'f' becomes 15\r\n *\r\n * Returns -1 on error.\r\n */\r\n\r\n\r\nfunction char2hex(a) {\r\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\r\n  : a >= 65 && a <= 70 ? a - 55 // A-F\r\n  : a >= 97 && a <= 102 ? a - 87 // a-f\r\n  : -1;\r\n}\r\n/**\r\n * Reads an alphanumeric + underscore name from the source.\r\n *\r\n * [_A-Za-z][_0-9A-Za-z]*\r\n */\r\n\r\n\r\nfunction readName(source, start, line, col, prev) {\r\n  var body = source.body;\r\n  var bodyLength = body.length;\r\n  var position = start + 1;\r\n  var code = 0;\r\n\r\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\r\n  code >= 48 && code <= 57 || // 0-9\r\n  code >= 65 && code <= 90 || // A-Z\r\n  code >= 97 && code <= 122) // a-z\r\n  ) {\r\n    ++position;\r\n  }\r\n\r\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\r\n}\r\n"]},"metadata":{},"sourceType":"module"}