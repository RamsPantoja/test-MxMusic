{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rams\\\\Documents\\\\Web\\\\Spotify\\\\cliente\\\\src\\\\components\\\\Player\\\\audiocomponent.js\";\nimport React, { Fragment } from 'react';\nimport PlayerControls from './buttons_player/playercontrols';\n\nclass ComponentAudio extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playStatus: false,\n      audioControls: {\n        songPercent: 0,\n        songTime: '0:00',\n        songDuration: '0:00'\n      }\n    };\n    this.reactAudioPlayer = React.createRef();\n    this.togglePlay = this.togglePlay.bind(this);\n    this.onTimeUpdateListener = this.onTimeUpdateListener.bind(this);\n    this.updateAudioTime = this.updateAudioTime.bind(this);\n    this.endPlayed = this.endPlayed.bind(this);\n  }\n\n  minTwoDigits(num) {\n    return (num < 10 ? '0' : '') + num;\n  }\n\n  onTimeUpdateListener() {\n    let currentDuration = this.reactAudioPlayer.current.duration;\n    let currentTime = this.reactAudioPlayer.current.currentTime;\n    let percent = currentTime / currentDuration;\n    let audioControls = Object.assign({}, this.state.audioControls);\n    audioControls.songPercent = percent;\n    audioControls.songTime = Math.floor(currentTime.toFixed(0) / 60) + ':' + (currentTime.toFixed(0) % 60 ? this.minTwoDigits(currentTime.toFixed(0) % 60) : '00');\n    audioControls.songDuration = Math.floor(currentDuration.toFixed(0) / 60) + ':' + (currentDuration.toFixed(0) % 60 ? this.minTwoDigits(currentDuration.toFixed(0) % 60) : '00');\n    this.setState({\n      audioControls\n    });\n  }\n\n  updateAudioTime(e) {\n    e.persist();\n\n    if (this.state.playStatus !== undefined) {\n      let songPercentage = e.nativeEvent.layerX / e.target.clientWidth;\n      let currentTime = songPercentage * this.reactAudioPlayer.current.duration;\n      this.reactAudioPlayer.current.currentTime = currentTime;\n      let audioControls = Object.assign({}, this.state.audioControls);\n      audioControls.songPercent = songPercentage;\n      this.setState({\n        audioControls\n      });\n    }\n  }\n\n  togglePlay() {\n    let status = this.state.playStatus;\n\n    if (status === false) {\n      setTimeout(() => {\n        this.reactAudioPlayer.current.play();\n      }, 0);\n      status = true;\n    } else {\n      this.reactAudioPlayer.current.pause();\n      status = false;\n    }\n\n    this.setState({\n      playStatus: status\n    });\n  }\n\n  endPlayed() {\n    let status = this.state.playStatus;\n    let ended = this.reactAudioPlayer.ended;\n\n    if (ended === true) {\n      status = false;\n    }\n\n    this.setState({\n      playStatus: status\n    });\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"audio\", {\n      id: \"audio\",\n      ref: this.reactAudioPlayer,\n      src: this.props.source,\n      onTimeUpdate: this.onTimeUpdateListener,\n      endPlayed: this.endPlayed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(PlayerControls, {\n      playStatus: this.state.playStatus,\n      percent: this.state.audioControls.songPercent,\n      onClick: this.togglePlay,\n      songTime: this.state.audioControls.songTime,\n      songDuration: this.state.audioControls.songDuration,\n      updateAudioTime: this.updateAudioTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ComponentAudio;","map":{"version":3,"sources":["C:\\Users\\Rams\\Documents\\Web\\Spotify\\cliente\\src\\components\\Player\\audiocomponent.js"],"names":["React","Fragment","PlayerControls","ComponentAudio","Component","constructor","props","state","playStatus","audioControls","songPercent","songTime","songDuration","reactAudioPlayer","createRef","togglePlay","bind","onTimeUpdateListener","updateAudioTime","endPlayed","minTwoDigits","num","currentDuration","current","duration","currentTime","percent","Object","assign","Math","floor","toFixed","setState","e","persist","undefined","songPercentage","nativeEvent","layerX","target","clientWidth","status","setTimeout","play","pause","ended","render","source"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport PlayerControls from './buttons_player/playercontrols';\r\n\r\nclass ComponentAudio extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            playStatus: false,\r\n            audioControls: {\r\n                songPercent: 0,\r\n                songTime: '0:00',\r\n                songDuration: '0:00'\r\n            }\r\n        }\r\n        this.reactAudioPlayer = React.createRef();\r\n        this.togglePlay = this.togglePlay.bind(this);\r\n        this.onTimeUpdateListener = this.onTimeUpdateListener.bind(this);\r\n        this.updateAudioTime = this.updateAudioTime.bind(this);\r\n        this.endPlayed = this.endPlayed.bind(this);\r\n    }\r\n\r\n    minTwoDigits (num) {\r\n        return ( num < 10 ? '0' : '') + num;\r\n    }\r\n    onTimeUpdateListener () {\r\n        let currentDuration = this.reactAudioPlayer.current.duration;\r\n        let currentTime = this.reactAudioPlayer.current.currentTime;\r\n        let percent = (currentTime / currentDuration);\r\n        let audioControls = Object.assign({}, this.state.audioControls);\r\n        audioControls.songPercent = percent;\r\n        audioControls.songTime = Math.floor(currentTime.toFixed(0) / 60) + ':' + (currentTime.toFixed(0) % 60 ? this.minTwoDigits((currentTime.toFixed(0) % 60)) : '00')\r\n        audioControls.songDuration = Math.floor(currentDuration.toFixed(0) / 60) + ':' + (currentDuration.toFixed(0) % 60 ? this.minTwoDigits(currentDuration.toFixed(0) % 60) : '00');\r\n        this.setState({ \r\n            audioControls\r\n        });\r\n        \r\n    }\r\n\r\n    updateAudioTime (e) {\r\n        e.persist();\r\n        if(this.state.playStatus !== undefined ) {\r\n            let songPercentage = e.nativeEvent.layerX / e.target.clientWidth;\r\n            let currentTime = songPercentage * this.reactAudioPlayer.current.duration;\r\n            this.reactAudioPlayer.current.currentTime = currentTime;\r\n            let audioControls = Object.assign({}, this.state.audioControls);\r\n            audioControls.songPercent = songPercentage;\r\n            this.setState({ \r\n                audioControls\r\n             });\r\n        }\r\n    }\r\n    \r\n    togglePlay () {\r\n        let status = this.state.playStatus;\r\n        if ( status === false) {\r\n            setTimeout(() => {\r\n                this.reactAudioPlayer.current.play();\r\n            }, 0)\r\n            status = true\r\n        } else {\r\n            this.reactAudioPlayer.current.pause();\r\n            status = false;\r\n        }\r\n\r\n        this.setState({\r\n            playStatus: status\r\n        })\r\n    }\r\n\r\n    endPlayed () {\r\n        let status = this.state.playStatus;\r\n        let ended = this.reactAudioPlayer.ended;\r\n        if (ended === true) {\r\n            status = false;\r\n        }\r\n\r\n        this.setState({\r\n            playStatus: status\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Fragment>\r\n                <audio id='audio' \r\n                ref={this.reactAudioPlayer} \r\n                src={this.props.source} \r\n                onTimeUpdate={this.onTimeUpdateListener}\r\n                endPlayed={this.endPlayed}></audio>\r\n                <PlayerControls \r\n                playStatus={this.state.playStatus}\r\n                percent={this.state.audioControls.songPercent} \r\n                onClick={this.togglePlay} \r\n                songTime={this.state.audioControls.songTime} \r\n                songDuration={this.state.audioControls.songDuration}\r\n                updateAudioTime={this.updateAudioTime}/>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ComponentAudio;"]},"metadata":{},"sourceType":"module"}