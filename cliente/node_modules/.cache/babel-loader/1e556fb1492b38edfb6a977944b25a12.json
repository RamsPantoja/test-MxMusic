{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rams\\\\Documents\\\\Web\\\\Spotify\\\\cliente\\\\src\\\\components\\\\Player\\\\audiocomponent.js\";\nimport React, { Fragment } from 'react';\nimport { Query } from 'react-apollo';\nimport { song_query } from '../../querys/querys';\nimport ProgressiveBar from './progress_bar/progressive_bar';\n\nclass ComponentAudio extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playStatus: 'play',\n      currentTime: 0,\n      source: this.props.sourceSong\n    };\n    this.toggleplay = this.toggleplay.bind(this);\n    this.updateTime = this.updateTime.bind(this);\n  }\n\n  updateTime(currentTime) {\n    let timeStamp = Math.floor(currentTime);\n    this.setState({\n      currentTime: timeStamp\n    });\n  }\n\n  toggleplay() {\n    let status = this.state.playStatus;\n    let audio = document.getElementById('audio');\n\n    if (status === 'play') {\n      status = 'pause';\n      audio.play();\n      setInterval(() => {\n        let currentTime = audio.currentTime;\n        let duration = React.createElement(Query, {\n          query: song_query,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, ({\n          loading,\n          error,\n          data\n        }) => {\n          if (loading) return '';\n          if (error) return \"Error: \".concat(error.message);\n          return data.getSong.duracion;\n        });\n        let percent = currentTime / duration * 100 + '%';\n        this.updateTime(currentTime);\n      }, 1000);\n    } else {\n      status = 'play';\n      audio.pause();\n    }\n\n    this.setState({});\n  }\n\n  render() {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"audio\", {\n      id: \"audio\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"source\", {\n      src: this.state.source,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    })), React.createElement(ProgressiveBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ComponentAudio;","map":{"version":3,"sources":["C:\\Users\\Rams\\Documents\\Web\\Spotify\\cliente\\src\\components\\Player\\audiocomponent.js"],"names":["React","Fragment","Query","song_query","ProgressiveBar","ComponentAudio","Component","constructor","props","state","playStatus","currentTime","source","sourceSong","toggleplay","bind","updateTime","timeStamp","Math","floor","setState","status","audio","document","getElementById","play","setInterval","duration","loading","error","data","message","getSong","duracion","percent","pause","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,cAAP,MAA2B,gCAA3B;;AAEA,MAAMC,cAAN,SAA6BL,KAAK,CAACM,SAAnC,CAA6C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE,MADH;AAETC,MAAAA,WAAW,EAAE,CAFJ;AAGTC,MAAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWK;AAHV,KAAb;AAMA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAEDC,EAAAA,UAAU,CAAEL,WAAF,EAAe;AACrB,QAAIM,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWR,WAAX,CAAhB;AACA,SAAKS,QAAL,CAAc;AACVT,MAAAA,WAAW,EAAEM;AADH,KAAd;AAGH;;AAEDH,EAAAA,UAAU,GAAI;AACV,QAAIO,MAAM,GAAG,KAAKZ,KAAL,CAAWC,UAAxB;AACA,QAAIY,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;;AACA,QAAKH,MAAM,KAAK,MAAhB,EAAwB;AACpBA,MAAAA,MAAM,GAAG,OAAT;AACAC,MAAAA,KAAK,CAACG,IAAN;AAEAC,MAAAA,WAAW,CAAE,MAAM;AACf,YAAIf,WAAW,GAAGW,KAAK,CAACX,WAAxB;AACA,YAAIgB,QAAQ,GAAG,oBAAC,KAAD;AAAO,UAAA,KAAK,EAAExB,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACV,CAAC;AAACyB,UAAAA,OAAD;AAAUC,UAAAA,KAAV;AAAiBC,UAAAA;AAAjB,SAAD,KAA4B;AACzB,cAAIF,OAAJ,EAAa,OAAO,EAAP;AACb,cAAIC,KAAJ,EAAW,wBAAiBA,KAAK,CAACE,OAAvB;AACX,iBAAOD,IAAI,CAACE,OAAL,CAAaC,QAApB;AACH,SALU,CAAf;AAOA,YAAIC,OAAO,GAAIvB,WAAW,GAAGgB,QAAf,GAA2B,GAA3B,GAAiC,GAA/C;AACA,aAAKX,UAAL,CAAgBL,WAAhB;AACH,OAXU,EAWR,IAXQ,CAAX;AAYH,KAhBD,MAgBO;AACHU,MAAAA,MAAM,GAAG,MAAT;AACAC,MAAAA,KAAK,CAACa,KAAN;AACH;;AAED,SAAKf,QAAL,CAAc,EAAd;AAGH;;AAEDgB,EAAAA,MAAM,GAAI;AACN,WACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,EAAE,EAAC,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkB;AAAQ,MAAA,GAAG,EAAE,KAAK3B,KAAL,CAAWG,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlB,CADJ,EAEG,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFH,CADJ;AAMH;;AAxDwC;;AA4D7C,eAAeP,cAAf","sourcesContent":["import React, { Fragment } from 'react';\r\nimport { Query } from 'react-apollo';\r\nimport { song_query } from '../../querys/querys'\r\nimport ProgressiveBar from './progress_bar/progressive_bar';\r\n\r\nclass ComponentAudio extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            playStatus: 'play',\r\n            currentTime: 0,\r\n            source: this.props.sourceSong\r\n        }\r\n\r\n        this.toggleplay = this.toggleplay.bind(this);\r\n        this.updateTime = this.updateTime.bind(this);\r\n    }\r\n\r\n    updateTime (currentTime) {\r\n        let timeStamp = Math.floor(currentTime)\r\n        this.setState({\r\n            currentTime: timeStamp\r\n        })\r\n    }\r\n\r\n    toggleplay () {\r\n        let status = this.state.playStatus;\r\n        let audio = document.getElementById('audio');\r\n        if ( status === 'play') {\r\n            status = 'pause';\r\n            audio.play();\r\n\r\n            setInterval( () => {\r\n                let currentTime = audio.currentTime;\r\n                let duration = <Query query={song_query}>\r\n                    {({loading, error, data}) => {\r\n                        if (loading) return '';\r\n                        if (error) return `Error: ${error.message}`;\r\n                        return data.getSong.duracion;\r\n                    }}\r\n                </Query>\r\n                let percent = (currentTime / duration) * 100 + '%';\r\n                this.updateTime(currentTime);\r\n            }, 1000);\r\n        } else {\r\n            status = 'play';\r\n            audio.pause();\r\n        }\r\n\r\n        this.setState({\r\n            \r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Fragment>\r\n                <audio id='audio'><source src={this.state.source}/></audio>\r\n               <ProgressiveBar />\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ComponentAudio;"]},"metadata":{},"sourceType":"module"}