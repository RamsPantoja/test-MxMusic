{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\RamsPantoja\\\\Documents\\\\Web\\\\test-MxMusic\\\\cliente\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\RamsPantoja\\\\Documents\\\\Web\\\\test-MxMusic\\\\cliente\\\\src\\\\App.js\";\nimport React, { Fragment, useState, createRef } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks'; //componentes del div contenedor\n\nimport Canciones from './components/content1/canciones';\nimport Artistas from './components/content1/artistas';\nimport Albums from './components/content1/albums';\nimport Inicio from './components/Drawer/inicio';\nimport Explorar from './components/Drawer/explorar';\nimport Radio from './components/Drawer/radio'; //Componentes\n\nimport Drawer from './components/Drawer/Drawer';\nimport PlayerContainer from './components/Player/Player';\nimport Search from './components/search/search';\nimport Aside from './components/aside/aside';\nimport './App.css'; //configuracion del apollo client\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:8200/graphql',\n  onError: ({\n    networkError,\n    graphQLErrors\n  }) => {\n    console.log('graphQLErrors', graphQLErrors);\n    console.log('networkError', networkError);\n  }\n}); // Componente Padre donde se rendiriza toda la aplicacion y donde vive el estado de la misma\n\nfunction App() {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        playStatus = _useState2[0],\n        setPlayStatus = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        trackSource = _useState4[0],\n        setTrackSource = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        songPercent = _useState6[0],\n        setSongPercent = _useState6[1];\n\n  const _useState7 = useState('0:00'),\n        _useState8 = _slicedToArray(_useState7, 2),\n        songTime = _useState8[0],\n        setSongTime = _useState8[1];\n\n  const _useState9 = useState('0:00'),\n        _useState10 = _slicedToArray(_useState9, 2),\n        songDuration = _useState10[0],\n        setSongDuration = _useState10[1]; // La constante ref hace referencia al elemento <audio> que se encuentra en el componente <PlayerContainer/> y le es pasada como props.ref\n\n\n  const audioPlayer = createRef(); // Esta funcion captura la fuente(source) de la cancion seleccionada en el componente <Canciones/> y se lo asigna al elemento <audio> como props.\n\n  function onTrackSourceSelected(source, e) {\n    e.preventDefault();\n    console.log(\"track's Source: \" + source);\n    setTrackSource(source);\n  } // Esta funcion permite escribir las segundos del songTime y songDuration que son menores a 10s\n\n\n  function minTwoDigits(num) {\n    return (num < 10 ? '0' : '') + num;\n  } // Esta funcion escucha el currentTime y duration del elemento <audio>, creo un porcentage de la cancion, actualizando songPercent.\n  // Ademas setea los valores para songTime, songDuration y los actualiza escuchando las propiedades currentTime y duration, respectivamente. \n\n\n  function onTimeUpdateListener() {\n    let currentDuration = audioPlayer.current.duration;\n    let currentTime = audioPlayer.current.currentTime;\n    let percent = currentTime / currentDuration;\n\n    if (isNaN(percent)) {\n      setSongPercent(0);\n    } else {\n      setSongPercent(percent);\n      setSongTime(Math.floor(currentTime.toFixed(0) / 60) + ':' + (currentTime.toFixed(0) % 60 ? minTwoDigits(currentTime.toFixed(0) % 60) : '00'));\n      setSongDuration(Math.floor(currentDuration.toFixed(0) / 60) + ':' + (currentDuration.toFixed(0) % 60 ? minTwoDigits(currentDuration.toFixed(0) % 60) : '00'));\n    }\n  } // Esta funcion Actualiza el tiempo de la cancion leyendo las propiedades de la pantalla y capturando el evento en el div donde se coloca el evento onClick().\n  // Actualiza el songPercent y la cancion se modifica al gusto del Usuario.\n\n\n  function updateAudioTime(e) {\n    e.persist();\n\n    if (playStatus !== undefined) {\n      let songPercentage = e.nativeEvent.layerX / e.target.clientWidth;\n      let currentTime = songPercentage * audioPlayer.current.duration;\n      audioPlayer.current.currentTime = currentTime;\n      setSongPercent(songPercentage);\n    }\n  } // Esta funcion Pausa y reproduce el elemento <audio> que se encuentra en el componente <PlayerContainer/>.\n\n\n  function togglePlay() {\n    let isPlaying = playStatus;\n\n    if (isPlaying === false) {\n      setTimeout(() => {\n        audioPlayer.current.play();\n      }, 0);\n      setPlayStatus(true);\n    } else {\n      audioPlayer.current.pause();\n      setPlayStatus(false);\n    }\n  } // Aqui se renderizan todos los componentes y se coloca el Router ademas del ApolloProvider.\n\n\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(Router, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Drawer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(PlayerContainer, {\n    source: trackSource,\n    ref: ref,\n    onTimeUpdateListener: onTimeUpdateListener,\n    playStatus: playStatus,\n    songDuration: songDuration,\n    songTime: songTime,\n    songPercent: songPercent,\n    updateAudioTime: updateAudioTime,\n    togglePlay: togglePlay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(Switch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"/songs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(Canciones, {\n    onDoubleClick: onTrackSourceSelected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })), React.createElement(Route, {\n    exact: true,\n    path: \"/artist\",\n    component: Artistas,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/albums\",\n    component: Albums,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/radio\",\n    component: Radio,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    component: Inicio,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), React.createElement(Route, {\n    exact: true,\n    path: \"/explorar\",\n    component: Explorar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }))), React.createElement(Search, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }), React.createElement(Aside, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/RamsPantoja/Documents/Web/test-MxMusic/cliente/src/App.js"],"names":["React","Fragment","useState","createRef","BrowserRouter","Router","Route","Switch","ApolloClient","ApolloProvider","Canciones","Artistas","Albums","Inicio","Explorar","Radio","Drawer","PlayerContainer","Search","Aside","client","uri","onError","networkError","graphQLErrors","console","log","App","playStatus","setPlayStatus","trackSource","setTrackSource","songPercent","setSongPercent","songTime","setSongTime","songDuration","setSongDuration","audioPlayer","onTrackSourceSelected","source","e","preventDefault","minTwoDigits","num","onTimeUpdateListener","currentDuration","current","duration","currentTime","percent","isNaN","Math","floor","toFixed","updateAudioTime","persist","undefined","songPercentage","nativeEvent","layerX","target","clientWidth","togglePlay","isPlaying","setTimeout","play","pause","ref"],"mappings":"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","sourcesContent":["import React, {Fragment, useState, createRef} from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\n\r\n//componentes del div contenedor\r\nimport Canciones from './components/content1/canciones';\r\nimport Artistas from './components/content1/artistas';\r\nimport Albums from './components/content1/albums';\r\nimport Inicio from './components/Drawer/inicio';\r\nimport Explorar from './components/Drawer/explorar';\r\nimport Radio from './components/Drawer/radio';\r\n\r\n//Componentes\r\nimport Drawer  from './components/Drawer/Drawer';\r\nimport PlayerContainer from './components/Player/Player';\r\nimport Search from './components/search/search';\r\nimport Aside from './components/aside/aside';\r\nimport './App.css';\r\n\r\n//configuracion del apollo client\r\n\r\nconst client = new ApolloClient({\r\n  uri:'http://localhost:8200/graphql',\r\n  onError: ({networkError, graphQLErrors}) => {\r\n    console.log('graphQLErrors', graphQLErrors);\r\n    console.log('networkError', networkError);\r\n  }\r\n})\r\n\r\n// Componente Padre donde se rendiriza toda la aplicacion y donde vive el estado de la misma\r\nfunction App() {\r\n  const [playStatus, setPlayStatus] = useState(false);\r\n  const [trackSource, setTrackSource] = useState('');\r\n  const [songPercent, setSongPercent ] = useState(0);\r\n  const [songTime, setSongTime ] = useState('0:00');\r\n  const [songDuration, setSongDuration ] = useState('0:00');\r\n\r\n// La constante ref hace referencia al elemento <audio> que se encuentra en el componente <PlayerContainer/> y le es pasada como props.ref\r\n  const audioPlayer = createRef();\r\n\r\n// Esta funcion captura la fuente(source) de la cancion seleccionada en el componente <Canciones/> y se lo asigna al elemento <audio> como props.\r\n function onTrackSourceSelected (source, e) {\r\n   e.preventDefault();\r\n   console.log(\"track's Source: \" + source);\r\n   setTrackSource(source);\r\n  }\r\n\r\n// Esta funcion permite escribir las segundos del songTime y songDuration que son menores a 10s\r\n  function minTwoDigits (num) {\r\n    return ( num < 10 ? '0' : '') + num;\r\n  }\r\n\r\n// Esta funcion escucha el currentTime y duration del elemento <audio>, creo un porcentage de la cancion, actualizando songPercent.\r\n// Ademas setea los valores para songTime, songDuration y los actualiza escuchando las propiedades currentTime y duration, respectivamente. \r\n  function onTimeUpdateListener () {\r\n    let currentDuration = audioPlayer.current.duration;\r\n    let currentTime = audioPlayer.current.currentTime;\r\n    let percent = (currentTime / currentDuration);\r\n    if (isNaN(percent)) {\r\n      setSongPercent(0)\r\n    } else {\r\n      setSongPercent(percent);\r\n      setSongTime(Math.floor(currentTime.toFixed(0) / 60) + ':' + (currentTime.toFixed(0) % 60 ? minTwoDigits(currentTime.toFixed(0) % 60) : '00'));\r\n      setSongDuration(Math.floor(currentDuration.toFixed(0) / 60) + ':' + (currentDuration.toFixed(0) % 60 ? minTwoDigits(currentDuration.toFixed(0) % 60) : '00'));\r\n    }\r\n  }\r\n\r\n// Esta funcion Actualiza el tiempo de la cancion leyendo las propiedades de la pantalla y capturando el evento en el div donde se coloca el evento onClick().\r\n// Actualiza el songPercent y la cancion se modifica al gusto del Usuario.\r\n  function updateAudioTime (e) {\r\n    e.persist();\r\n    if ( playStatus !== undefined ) {\r\n      let songPercentage = e.nativeEvent.layerX / e.target.clientWidth;\r\n      let currentTime = songPercentage * audioPlayer.current.duration;\r\n      audioPlayer.current.currentTime = currentTime;\r\n      setSongPercent(songPercentage);\r\n    }\r\n  }\r\n// Esta funcion Pausa y reproduce el elemento <audio> que se encuentra en el componente <PlayerContainer/>.\r\n  function togglePlay () {\r\n    let isPlaying = playStatus;\r\n    if ( isPlaying === false ) {\r\n      setTimeout(() => {\r\n        audioPlayer.current.play();\r\n      }, 0);\r\n      setPlayStatus(true);\r\n    } else {\r\n      audioPlayer.current.pause();\r\n      setPlayStatus(false);\r\n    }\r\n  }\r\n// Aqui se renderizan todos los componentes y se coloca el Router ademas del ApolloProvider.\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <Fragment>\r\n          <Drawer/>\r\n          <PlayerContainer \r\n          source={trackSource}\r\n          ref={ref}\r\n          onTimeUpdateListener={onTimeUpdateListener}\r\n          playStatus={playStatus}\r\n          songDuration={songDuration}\r\n          songTime={songTime}\r\n          songPercent={songPercent}\r\n          updateAudioTime={updateAudioTime}\r\n          togglePlay={togglePlay}\r\n          />\r\n          <div className='content'>\r\n            <Switch>\r\n              <Route exact path='/songs'>\r\n                <Canciones onDoubleClick={onTrackSourceSelected} />\r\n              </Route>\r\n              <Route exact path='/artist' component={ Artistas }/>\r\n              <Route exact path='/albums' component={ Albums }/>\r\n              <Route exact path='/radio' component={ Radio }/>\r\n              <Route exact path='/' component={ Inicio }/>\r\n              <Route exact path='/explorar' component={ Explorar }/>\r\n            </Switch>\r\n          </div>\r\n          <Search/>\r\n          <Aside/>\r\n        </Fragment>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}